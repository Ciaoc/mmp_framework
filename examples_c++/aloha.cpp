/* Copyright (C) 2018-2019 Bho Matthiesen, Christoph Hellings
 * 
 * This program is used in the article:
 *
 * Bho Matthiesen, Christoph Hellings, Eduard A. Jorswieck, and Wolfgang
 * Utschick, "Mixed Monotonic Programming for Fast Global Optimization,"
 * submitted to IEEE  Transactions on Signal Processing.
 * 
 * 
 * License:
 * This program is licensed under the GPLv2 license. If you in any way use this
 * code for research that results in publications, please cite our original
 * article listed above.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details. */


#include <iostream>
#include <stdexcept>

#include "aloha.h"


ALOHA<3> get_aloha(void)
{
    // DATA:
    const double Rmin[][3] = {
     {0.2065572,  0.39122164, 0.33131569},
     {0.12759334, 0.6162188,  0.10963266},
     {0.07910093, 0.62732399, 0.49626962},
     {0.88349804, 0.0429063,  0.77054685},
     {0.1182234,  0.11891609, 0.23636645},
     {0.40675742, 0.28014261, 0.30532786},
     {0.13010065, 0.57805597, 0.1040267 },
     {0.38153589, 0.24213353, 0.13443177},
     {0.70318008, 0.48084174, 0.04293787},
     {0.45790685, 0.93938764, 0.05728448},
     {0.83054821, 0.58052972, 0.07137193},
     {0.15586006, 0.29159709, 0.07834139},
     {0.42599618, 0.3596415,  0.23601768},
     {0.43192343, 0.2611879,  0.23983719},
     {0.35001488, 0.38966352, 0.26407513},
     {0.50604836, 0.41058584, 0.39547403},
     {0.42398587, 0.24203652, 0.60255193},
     {0.38948992, 0.73921466, 0.46080529},
     {0.13439219, 0.30557998, 0.94559549},
     {0.34072132, 0.09603207, 0.39966881},
     {0.10396962, 0.92280546, 0.33409518},
     {0.66356854, 0.22991051, 0.30768647},
     {0.45321982, 0.25165489, 0.36798562},
     {0.17003365, 0.41840587, 0.30623125},
     {0.28088397, 0.32412411, 0.62076916},
     {0.54562078, 0.30956086, 0.08291756},
     {0.18001981, 0.17648812, 0.55700311},
     {0.52992045, 0.01405172, 0.31013077},
     {0.30560645, 0.1850959,  0.36754331},
     {0.39569645, 0.866292,   0.24329054},
     {0.71780585, 0.08894515, 1.18571875},
     {0.77302447, 0.0924248,  0.15243752},
     {0.7346712,  0.50696339, 0.5086691 },
     {0.45845818, 0.2129061,  0.78157291},
     {0.46553071, 0.49603624, 0.45323734},
     {0.41832823, 0.3058317,  0.53543627},
     {0.18257997, 0.54000478, 0.49255673},
     {0.27684138, 1.03277821, 0.11003654},
     {0.25074341, 0.35433835, 0.63880167},
     {0.45289343, 0.4269508,  0.22515753},
     {0.248995,   0.02704583, 0.49082023},
     {0.60146141, 0.59906594, 0.30160991},
     {0.51844365, 0.32501718, 0.53046105},
     {0.89045429, 0.12874073, 0.18943807},
     {0.5563745,  0.17555504, 0.45484945},
     {0.35439975, 0.17364184, 0.27343884},
     {0.24373623, 0.43016195, 0.65226577},
     {0.05440987, 0.21194527, 0.43136004},
     {0.1303402,  0.34769634, 0.59729233},
     {0.48446572, 0.34702831, 0.03950515},
     {0.36961849, 0.05955566, 0.44415812},
     {0.21789828, 0.30763787, 0.11472397},
     {0.27636466, 0.37707924, 0.59211198},
     {0.27880621, 0.46284461, 0.12191925},
     {0.42317408, 0.04335724, 0.34670177},
     {0.21593556, 0.31177584, 0.64540434},
     {0.61339829, 0.42183059, 0.27052724},
     {0.15284482, 0.75145084, 0.32641772},
     {0.38372524, 0.1515919,  0.06033153},
     {0.04468512, 0.65911804, 0.63682563},
     {0.50191507, 0.26082706, 0.32781221},
     {0.16906802, 0.47329735, 0.39130237},
     {0.47660769, 0.62884241, 0.3596729 },
     {0.79184669, 0.2235684,  0.21232676},
     {0.04606083, 0.70000647, 0.28045423},
     {0.09201277, 0.6465209,  0.55643689},
     {0.29773057, 0.24980216, 0.30190139},
     {0.28720384, 1.04225447, 0.37936046},
     {0.03425926, 0.56386314, 0.6455784 },
     {0.19438932, 0.04785552, 0.10011677},
     {0.31093006, 0.27272495, 0.34121745},
     {0.94953132, 0.00893812, 0.23062609},
     {0.23753168, 0.5232536,  0.33504921},
     {0.43428935, 0.19705183, 0.47608502},
     {0.66694025, 0.4098439,  0.18386429},
     {0.2080587,  0.11617537, 0.22003372},
     {0.64964648, 0.34043351, 0.28041407},
     {0.84270392, 0.44502305, 0.46651205},
     {0.36841178, 0.61017188, 0.29133459},
     {0.26683766, 0.4665672,  0.0647588 },
     {0.48588509, 0.25874352, 0.1565817 },
     {0.478812,   0.252867,   0.45726966},
     {0.24981359, 0.53963315, 0.08075173},
     {0.29066844, 0.13081203, 0.51966344},
     {0.38491226, 0.6364346,  0.02177291},
     {0.36319682, 0.20011697, 0.8484705 },
     {0.42416052, 0.17862665, 0.55982675},
     {0.39028285, 0.71855944, 0.31745908},
     {0.37963486, 0.18238259, 0.13203584},
     {0.46703367, 0.69287765, 0.50145429},
     {0.06915565, 0.34309284, 0.72686455},
     {0.21339499, 0.23131164, 0.67484218},
     {0.22106863, 0.22353335, 0.1047003 },
     {0.61231375, 0.43527524, 0.48217919},
     {0.50762012, 0.21645003, 0.66126491},
     {0.07764905, 0.23299043, 0.01493035},
     {0.21665849, 0.55897965, 0.35374394},
     {0.47339162, 0.18839861, 0.11161186},
     {0.30341248, 0.48899875, 0.30583079},
     {0.3902981,  0.32280311, 0.26063245}};
    const bool beta[3][3] = {
     {false, true, true},
      { true,false, true},
      { true, true,false}};
    const double ck[][3] = {
     {1.46459273, 3.56878364, 3.5327645 },
     {0.98912071, 3.39384676, 1.07244838},
     {0.62091041, 3.25829393, 4.24238417},
     {4.23097893, 0.53202504, 4.95165632},
     {0.68153174, 1.19106751, 3.07513016},
     {2.3640589, 3.8973151, 2.67724886},
     {2.37041501, 3.02704175, 1.03698745},
     {2.14984052, 2.02910139, 1.07953807},
     {3.33942625, 4.81720049, 0.51756687},
     {4.53932514, 5.04253387, 0.60174667},
     {4.92380466, 4.27081868, 0.53551848},
     {1.65399597, 4.34487809, 1.19505052},
     {2.76215947, 3.32042497, 3.80388859},
     {4.14778887, 4.07839174, 1.28125188},
     {2.27331518, 3.26238575, 4.01377803},
     {3.95166727, 4.97711949, 2.4021874 },
     {3.14330909, 3.65250028, 3.6059203 },
     {4.91882087, 4.39003691, 4.03533628},
     {3.6914945, 2.41848331, 4.70301756},
     {3.07304114, 0.9124497, 3.03376296},
     {1.26032885, 4.2188745, 2.44646884},
     {3.68996876, 1.96176468, 4.16576947},
     {2.71556886, 2.68738794, 3.98813822},
     {2.49179385, 3.48405181, 3.7203763 },
     {2.31197637, 3.57243734, 2.85001561},
     {2.32504567, 3.65684017, 0.95045387},
     {3.13365296, 1.03523314, 4.00018069},
     {3.6126269, 0.29646274, 3.91020937},
     {2.57384098, 2.87974614, 2.74865796},
     {3.15854715, 4.05293946, 2.49569263},
     {3.21507181, 5.67440103, 6.03392313},
     {3.95094646, 0.59935562, 1.85724125},
     {4.9029418, 3.79346119, 3.53563363},
     {3.37892499, 1.34063589, 5.50689986},
     {3.48720932, 4.77637422, 3.42589629},
     {3.0665582, 3.04124491, 4.01870318},
     {1.47297116, 3.58559441, 3.06504025},
     {3.02530699, 4.94033952, 0.86128043},
     {2.49318282, 3.87654958, 4.80662205},
     {3.82138815, 3.86072225, 3.59552637},
     {2.16748476, 0.26424619, 3.48079018},
     {3.5839449, 4.62792761, 3.03854129},
     {4.39429421, 2.53871735, 3.11526005},
     {5.39496039, 1.83419909, 1.62376758},
     {5.12261339, 1.29222792, 3.89598128},
     {2.37467832, 1.22494349, 2.49346885},
     {3.05486322, 4.04532378, 3.85800891},
     {0.42311016, 1.63072088, 3.36632999},
     {1.49858207, 3.1250363, 3.15937254},
     {2.81020049, 2.9500888, 0.38366054},
     {2.26490585, 0.64374814, 2.72275543},
     {1.41809149, 3.48180259, 0.73254084},
     {2.21591708, 3.88931865, 3.60288382},
     {3.31178004, 3.71489655, 2.64370952},
     {3.2626529, 0.56692498, 3.26036057},
     {4.03613346, 2.2489209, 3.47444036},
     {3.96079755, 2.53498261, 2.94973676},
     {3.20211314, 3.99304828, 3.40650068},
     {3.46245898, 0.63997085, 1.01224219},
     {0.78532959, 5.20469967, 3.87461822},
     {3.68505416, 2.04993856, 3.55646936},
     {1.20314994, 2.90916887, 2.79702557},
     {3.53231748, 3.63364652, 2.82153251},
     {4.0075655, 2.09689564, 3.46265389},
     {0.79657377, 3.93642594, 4.17062223},
     {0.89395103, 3.69189348, 4.41807279},
     {3.92087708, 1.25864123, 2.02090529},
     {2.86006243, 4.99028015, 3.75979288},
     {0.24959434, 4.51382623, 4.32414328},
     {1.40926126, 0.62115345, 2.6778394 },
     {3.41913745, 2.15671683, 3.30210662},
     {4.32197508, 0.08948399, 2.251079  },
     {3.48680067, 3.49370054, 1.76017997},
     {2.17787623, 1.48448837, 4.16072132},
     {2.67661682, 2.4753581, 4.58789746},
     {2.57567586, 2.05957822, 1.58806735},
     {4.16407424, 2.243501, 2.33472487},
     {4.4969004, 2.97695743, 4.25016624},
     {3.37252019, 3.36309504, 3.91806413},
     {2.3258611, 2.13095218, 0.55761137},
     {4.7590064, 2.89252052, 1.845995  },
     {3.13687567, 2.42831257, 2.86726026},
     {1.80920275, 3.83354071, 1.03522876},
     {3.55318044, 1.19244356, 2.41208223},
     {3.38427377, 3.57332109, 0.15025324},
     {3.70322757, 2.03445897, 4.72463052},
     {2.19882451, 3.64206319, 2.95370777},
     {3.41375636, 3.47129047, 3.33307606},
     {3.0887532, 1.15372106, 1.58993662},
     {2.52228728, 4.38646401, 5.07839969},
     {1.44514588, 2.0084347, 4.18529115},
     {1.42447802, 2.11267067, 4.93758079},
     {1.15810541, 1.1432916, 4.19948318},
     {4.45015264, 2.9307911, 3.22755305},
     {3.44168559, 2.53577722, 4.29064465},
     {0.74311426, 1.76525471, 0.34331801},
     {2.32477216, 4.46148397, 1.64604742},
     {3.08278128, 2.1812044, 2.69083709},
     {3.06308265, 3.52921305, 3.63683489},
     {3.55752682, 1.98515484, 2.16105474}};

    // Which Scenario to use (row)
    int scenario = 0;

    // set up problem
	ALOHA<3> aloha;

	aloha.setPrecision(1e-3);
	aloha.useRelTol = false;
	aloha.disableReduction = true;
	aloha.outputEvery = 1e6;
	//aloha.enablePruning = false;

	for (size_t i = 0; i < 3; ++i)
	{
		aloha.ck[i] = ck[scenario][i];
		aloha.Rmin[i] = Rmin[scenario][i];
		for (size_t j = 0; j < 3; ++j)
		{
			aloha.beta[i][j] = beta[i][j];
	    }
	}
    return aloha;
}

ALOHA<3> optimize_aloha(ALOHA<3> aloha)
{
    std::cout << "Optimizing...\n";
    aloha.optimize();
    std::cout << "Done!\n";
    return aloha;
}

void test_single_evaluation(ALOHA<3> aloha, const std::vector<double>& x, const std::vector<double>& y)
{
    printf("Result of ALOHA: ");
    std::cout << aloha.evaluate(x, y) << std::endl << std::endl;
}

void test_single_constraint(ALOHA<3> aloha, const std::vector<double>& x, const std::vector<double>& y)
{
    printf("Result of ALOHA: ");
    std::cout << aloha.eval_constr(x, y) << std::endl << std::endl;
}
